fits_open_file

 SYNOPSIS
   Open a fits file

 USAGE
   Fits_File_Type fits_open_file (String_Type filename, String_Type mode)

 DESCRIPTION
   The `fits_open_file' function can be used to open and existing fits
   file for reading or updating, or to create a new fits file, depending upon
   the value of the `mode' parameter.  Specifically, if `mode' is 
   `"r"', the file will be opened for reading.  If `mode' is `"w"',
   the file will be opened for updating (both reading and writing).  Otherwise, 
   `mode' must be `"c"', which indicates that a new file is to be created.
   In the latter case, if a file already exists with the specified name, it will
   get deleted and a new one created in its place.
   
   If the function fails, it will signal an error; otherwise an open file
   pointer will be returned.

 EXAMPLE

 SEE ALSO
   fits_close_file, fits_create_binary_table
--------------------------------------------------------------

fits_close_file

 SYNOPSIS
   Close a fits file

 USAGE
   fits_close_file (Fits_File_Type f)

 DESCRIPTION
   The `fits_close_file' closes a previously opened fits file.  The function
   will signal an error if the operation fails.

 NOTES
   This function could fail if it fails to write out any buffered data because
   of filesystem errors (disk full, etc.).

 SEE ALSO
   fits_open_file
--------------------------------------------------------------

fits_key_exists

 SYNOPSIS
   Check for the existence of a keyword

 USAGE
   Int_Type fits_key_exists (fd, key)

      Fits_File_Type or String_Type fd;
      String_Type key;


 DESCRIPTION
   The `fits_key_exists' function checks for the existence of a specified 
   keyword in the file specified by the descriptor `fd', which must specify
   the name of a file or an open file pointer.
   
   If the specified key exists, the function return 1, otherwise it returns 0.

 SEE ALSO
   fits_read_key, fits_read_header
--------------------------------------------------------------

fits_binary_table_column_exists

 SYNOPSIS
   Check for the existence of a binary table column

 USAGE
   Int_Type fits_binary_table_column_exists (fd, col)

      Fits_File_Type or String_Type fd;
      String_Type col;


 DESCRIPTION
   This function may be used to determine whether or not a named column
   exists in a binary table.  The table is specified via the `fd' 
   parameter which must either be the name of a file containing the binary
   table, or an file pointer.
   
   If the specified column exists, 1 will be returned; otherwise the function
   will return 0.

 SEE ALSO
   fits_key_exists, fits_open_file
--------------------------------------------------------------

fits_read_col

 SYNOPSIS
   Read one or more columns from a FITS binary table

 USAGE
   (x1, ...xN) = fits_read_col (file, c1, ... cN)

 DESCRIPTION
   This function returns one or more vectors containing objects in the
   specified columns of the binary table indicated by `file'.  If
   `file' is a string, then the file will be opened via the virtual
   file specification implied by `file'. Otherwise, `file'
   should represent an already opened FITS file.  The column parameters
   may either be strings denoting the column names, or integers
   representing the column numbers.

 SEE ALSO
   fits_read_cell, fits_read_row, fits_read_table
--------------------------------------------------------------

fits_read_col_struct

 SYNOPSIS
   Read one or more columns from a FITS binary table

 USAGE
   struct = fits_read_col_struct (file, col1, ...)

       Fits_File_Type or String_Type file;
       String_Type col1, ...;


 DESCRIPTION
   This function works exactly like `fits_read_col' except it returns the
   values in a structure.  See the documentation on that function for more
   information.
   

 SEE ALSO
   fits_read_col, fits_read_key_struct, fits_read_row, fits_read_header
--------------------------------------------------------------

fits_read_cell

 SYNOPSIS
   Read a cell from a FITS binary table

 USAGE
   X = fits_read_cell (file, r, c)

 DESCRIPTION
   This function returns the object in the column `c' and row
   `r' of the binary table indicated by `file'.  If `file'
   is a string, then the file will be opened via the virtual file
   specification implied by `file'. Otherwise, `file' should
   represent an already opened FITS file.

 SEE ALSO
   fits_read_col, fits_read_row
--------------------------------------------------------------

fits_read_row

 SYNOPSIS
   Read a row from a FITS binary table

 USAGE
   Struct_Type fits_read_cell (file, r)

 DESCRIPTION
   
   This function returns a structure containing the data in the columns
   of the row `r' of the binary table indicated by `file'. If
   `file' is a string, then the file will be opened via the virtual
   file specification implied by `file'. Otherwise, `file'
   should represent an already opened FITS file.
   

 SEE ALSO
   fits_read_col, fits_read_cell
--------------------------------------------------------------

fits_read_header

 SYNOPSIS
   Read a FITS header

 USAGE
   Struct_Type fits_read_header (file)

       Fits_File_Type or String_Type file;


 DESCRIPTION
   This function reads the header of the fits file given by the
   `file' parameter and returns it as a structure.  If `file' is
   a string, then the file will be opened via the virtual file
   specification implied by `file'. Otherwise, `file' should
   represent an already opened FITS file.

 SEE ALSO
   fits_read_table
--------------------------------------------------------------

fits_read_table

 SYNOPSIS
   Read a FITS table

 USAGE
   Struct_Type fits_read_table (file [,columns...])

       Fits_File_Type or String_Type file;


 DESCRIPTION
   `fits_read_table' reads the data in a table of the FITS file
   specified by `file' and returns it as a structure.  If the optional
   column name parameters are specified, then only those columns will be read.
   Otherwise, the entire table will be returned.
   
   If `file' is a string, then the file will be opened via the virtual file
   specification implied by `file'. Otherwise, `file' should
   represent an already opened FITS file.

 SEE ALSO
   fits_read_col, fits_read_cell, fits_read_row, fits_read_header
--------------------------------------------------------------

fits_read_image

 SYNOPSIS
   Read an image from a fits file

 USAGE
   Array_Type fits_read_image (fd)

      Fits_File_Type or String_Type fd;


 DESCRIPTION
   This function reads an image from the specified file descriptor.  
   The file descriptor must be either the name of an existing file, or an
   open file pointer.  It returns the image upon sucess, or signals an error 
   upon failure.

 SEE ALSO
   fits_read_table, fits_read_col, fits_open_file
--------------------------------------------------------------

fits_read_key

 SYNOPSIS
   Read one or more keywords from a FITS file

 USAGE
   (val1,...) = fits_read_key (file, key1, ...)

       Fits_File_Type or String_Type file;
       String_Type key1, ...;


 DESCRIPTION
   `fits_read_key' reads the values of one or more keywords in the fits
   file specified by `file' and returns them.  If `file'
   is a string, then the file will be opened via the virtual file
   specification implied by `file'. Otherwise, `file' should
   represent an already opened FITS file.  If any of the keywords do not exist,
   a value of NULL will be returned for the corresponding keyword.
   

 SEE ALSO
   fits_read_key_struct, fits_read_col, fits_read_cell, fits_read_row, fits_read_header
--------------------------------------------------------------

fits_read_key_struct

 SYNOPSIS
   Read one or more keywords from a FITS file

 USAGE
   struct = fits_read_key (file, key1, ...)

       Fits_File_Type or String_Type file;
       String_Type key1, ...;


 DESCRIPTION
   This function works exactly like `fits_read_key' excepts returns the
   values in a structure.  See the documentation on that function for more
   information.
   

 SEE ALSO
   fits_read_key, fits_read_col, fits_read_cell, fits_read_row, fits_read_header
--------------------------------------------------------------

fits_create_binary_table

 SYNOPSIS
   Prepare a binary table

 USAGE
   fits_create_binary_table (file, extname, nrows, ttype, tform, tunit)

       Fits_File_Type or String_Type file;
       String_Type extname;
       Int_Type nrows;
       String_Type ttype[];
       String_Type tform[];
       String_Type tunit[];


 DESCRIPTION
   This creates a new binary table with the specified structure.  The parameters
   `ttype', `tform', and `tunit' are string arrays that specify
   the column names, column data type, and column units, respectively.
   The binary table will be given the extension name `extname'.

 SEE ALSO
   fits_write_binary_table, fits_open_file
--------------------------------------------------------------

fits_write_binary_table

 SYNOPSIS
   Write a binary table

 USAGE
   fits_create_binary_table (file, extname, sdata, skeys [,hist])

       Fits_File_Type or String_Type file;
       String_Type extname;
       Struct_Type sdata;
       Struct_Type skeys;
       Struct_Type hist;


 DESCRIPTION
   The `fits_write_binary_table' function creates a new binary table in
   the specified file.  The parameter `file' specifies either a filename or
   an open file pointer.  The `extname' parameter specifies the extension
   name of the binary table.  The data written to table are specified in the 
   `sdata' structure, where the name of the structure field specifies the 
   column name.  If `skeys' is non-NULL, then it is a structure indicating
   additional keywords to be written to the header of the binary table.  If the
   optional parameter `hist' is present and non-NULL, then it is a structure
   whose fields indicate either comment or history information to be written
   to the header.

 EXAMPLE
   The following code

       variable data = struct { x, cosx, sinx };
       data.x = [0:2*PI:0.01];
       data.cosx = cos(data.x);
       data.sinx = sin(data.x);
   
       variable keys = struct { hduname, username};
       keys.hduname = "COSXSINX";
       keys.username = "John Doe";
   
       variable hist = struct { history, comment};
       hist.history = ["This is a history record", "This is another"];
       hist.comment = ["This is a comment", "And this is another"];
   
       fits_write_binary_table ("foo.fits", "COSXSINX", data, keys, hist);

   produces a binary table with the header:

       XTENSION= 'BINTABLE' / binary table extension
       BITPIX  =                   8 / 8-bit bytes
       NAXIS   =                   2 / 2-dimensional binary table
       NAXIS1  =                  24 / width of table in bytes
       NAXIS2  =                 629 / number of rows in table
       PCOUNT  =                   0 / size of special data area
       GCOUNT  =                   1 / one data group (required keyword)
       TFIELDS =                   3 / number of fields in each row
       TTYPE1  = 'x       ' / label for field   1
       TFORM1  = 'D       ' / data format of field: 8-byte DOUBLE
       TTYPE2  = 'cosx    ' / label for field   2
       TFORM2  = 'D       ' / data format of field: 8-byte DOUBLE
       TTYPE3  = 'sinx    ' / label for field   3
       TFORM3  = 'D       ' / data format of field: 8-byte DOUBLE
       EXTNAME = 'COSXSINX' / name of this binary table extension
       HDUNAME = 'COSXSINX'
       USERNAME= 'John Doe'
       HISTORY This is a history record
       HISTORY This is another
       COMMENT This is a comment
       COMMENT And this is another


 NOTES
   This function provides no mechanism to mix comments and keyword records.  As
   the example shows, this function places the comment and history records at
   the end of the table.

 SEE ALSO
   fits_createe_binary_table, fits_open_file
--------------------------------------------------------------

fits_update_key

 SYNOPSIS
   Update the value of a keyword

 USAGE
   fits_update_key (fd, key, val, comment)

       String_Type or Fits_File_Type fd;
       String_Type key;
       Any type val;
       String_Type comment;


 DESCRIPTION
   The `fits_update_key' function updates the value and comment fields
   of an existing keyword with the specified name.  If the keyword does not 
   exist, a new keyword will be appended to the end of the header.

 SEE ALSO
   fits_read_key
--------------------------------------------------------------

fits_read_records

 SYNOPSIS
   Read all the records in a fits header

 USAGE
   String_Type[] fits_read_records (Fits_File_Type or String_Type fp)

 DESCRIPTION
   This function returns a list of all the header records associated with the
   fits file descriptor as an array of strings.

 SEE ALSO
   fits_write_records, fits_read_key
--------------------------------------------------------------

fits_write_records

 SYNOPSIS
   Write records to fits header

 USAGE
   

 DESCRIPTION

 SEE ALSO
   
--------------------------------------------------------------

