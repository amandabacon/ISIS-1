#!/usr/bin/env slsh

require ("fits");

private define usage ()
{
   vmessage("Usage: %s inputfile outputfile", __argv[0]);
   message("");
   message("Copy an input file to an output file, optionally filtering");
   message("the file in the process.  This seemingly simple program can");
   message("apply powerful filters which transform the input file as");
   message("it is being copied.  Filters may be used to extract a");
   message("subimage from a larger image, select rows from a table,");
   message("filter a table with a GTI time extension or a SAO region file,");
   message("create or delete columns in a table, create an image by");
   message("binning (histogramming) 2 table columns, and convert IRAF");
   message("format *.imh or raw binary data files into FITS images.");
   message("See the CFITSIO User's Guide for a complete description of");
   message("the Extended File Name filtering syntax.");
   message("");
   message("Examples:");
   message("");
   message("fitscopy in.fit out.fit                   (simple file copy)");
   message("fitscopy - -                              (stdin to stdout)");
   message("fitscopy in.fit[11:50,21:60] out.fit      (copy a subimage)");
   message("fitscopy iniraf.imh out.fit               (IRAF image to FITS)");
   message("fitscopy in.dat[i512,512] out.fit         (raw array to FITS)");
   message("fitscopy in.fit[events][pi>35] out.fit    (copy rows with pi>35)");
   message("fitscopy in.fit[events][bin X,Y] out.fit  (bin an image) ");
   message("fitscopy in.fit[events][col x=.9*y] out.fit        (new x column)");
   message("fitscopy in.fit[events][gtifilter()] out.fit       (time filter)");
   message("fitscopy in.fit[2][regfilter(\"pow.reg\")] out.fit (spatial filter)");
   message("");
   message("Note that it may be necessary to enclose the input file name");
   message("in single quote characters on the Unix command line.");
}

define slsh_main ()
{
   if (__argc != 3)
     {
	usage ();
	exit (1);
     }
   
   variable fpin = fits_open_file (__argv[1], "r");
   variable fpout = fits_open_file (__argv[2], "c");
   variable status = _fits_copy_file(fpin, fpout, 1, 1, 1);
   if (status)
     verror ("%s", _fits_get_errstatus (status));

   fits_close_file(fpout);
}
