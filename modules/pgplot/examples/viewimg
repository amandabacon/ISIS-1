#!/usr/bin/env slsh
require ("fits");
import ("pgplot");

static define read_and_display_image (file)
{
   variable img = fits_read_img (file);
   variable dims; (dims,,) = array_info (img);
   % Free the image of any degenerate axis hacks.
   if (length (dims) < 2)
     {
	fprintf (stderr, "The image is empty or consists of 1 pixel\n");
	return;
     }
   while ((dims[0] == 1) and (length (dims > 2)))
     dims = dims[[1:]];
   reshape (img, dims);
   variable nx = dims[1], ny = dims[0];
   variable z0 = min(img), z1 = max(img);
   
   if (z0 <= 0)
     {
	z0 -= 1e-16;
	img -= z0;
	z1 -= z0;
	z0 = 1e-16;
     }
   img = sqrt(img);
   z0 = min(img); z1 = max(img);
   

   variable z = [z0:z1:(z1-z0)/10.0];
   variable g = sum (img)/length(img);
   variable dg = sqrt (sum((img-g)^2)/length(img));
   variable g0 = g-3*dg;
   variable g1 = g+3*dg;
   if (g0 < z0) g0 = z0;
   if (g1 > z1) g1 = z1;
     
   _pgopen("/xwin");
   _pgenv(0,nx-1,0,ny-1,0,0);
   _pgpap (0, 1);
   _pgimag(img,0,ny-1,0,nx-1, g0, g1, [0,1,0,0,0,1]);
   _pgsci(2);
   _pgcont(img,0,ny-1,0,nx-1, z, [0,1,0,0,0,1], 1);
   _pgend();
}

if (__argc != 2)
{
   () = fprintf (stderr, "Usage: %s fits-image-file\n", __argv[0]);
   exit (1);
}
read_and_display_image (__argv[1]);
exit(0);

