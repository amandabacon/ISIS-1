@SET_MAKE@
SHELL = /bin/sh
RM = /bin/rm -f

config_dir = @CONFIG_DIR@
prefix     = @prefix@

CC         = @CC@
CFLAGS     = @CFLAGS@
ELF_CC     = @ELF_CC@
ELF_CFLAGS = @ELF_CFLAGS@ -Dunix $(CFLAGS)
CC_SHARED  = @CC_SHARED@

FC         = @FC@
FCFLAGS    = @FCFLAGS@
FCLIBS     =# @FCLIBS@

MEMCHECK   = valgrind --tool=memcheck --leak-check=yes --leak-resolution=med --num-callers=20

HEA         = @HEADAS_DIR@
WITH_HEADAS = @WITH_HEADAS@

SLANG_INC   = @SLANG_INC@
SLANG_LIB   = @SLANG_LIB@ -lslang
CFITSIO_INC = @CFITSIO_INC@
CFITSIO_LIB = @CFITSIO_LIB@
LIBS_FOR_MODULES = @ISIS_LIB_FOR_MODULES@  @CFITSIO_LIB_FOR_MODULES@ @SLANG_LIB_FOR_MODULES@#

INCS = -I$(config_dir)/src $(SLANG_INC)

SHARED_LIBRARIES = rmf_user.so example-profile.so

TEST_SCRIPTS = aped_models array_fit arrayops assign_model assign_back \
   backscale backio cache confmap constraint ds_combine eval_fun2 fit \
   flux_corr fs_comm group hist multi notice_values opfun \
   param_defaults par_fun pileup post_model_hook readcol \
   rebin_dataset rebin region_stats renorm rmf_slang stat \
   sys_err user_grid_eval xgroup yshift

check:	write-permission $(SHARED_LIBRARIES)
	-@if test -f "../.binary" ; then \
	    TEST_ISIS="../bin/isis"; \
	    ISIS_SRCDIR=".."; \
	    LD_LIBRARY_PATH="../opt/lib" ; \
	    export LD_LIBRARY_PATH ; \
	    DYLD_LIBRARY_PATH=$$LD_LIBRARY_PATH ; \
	    export DYLD_LIBRARY_PATH ; \
	elif test -x "../src/objs/isis"; then \
	    TEST_ISIS="../src/objs/isis"; \
	    ISIS_SRCDIR=".."; \
	 else \
	    TEST_ISIS="`which isis`" ; \
	    if test ! -x "$$TEST_ISIS" ; then \
	        echo "" ; \
	        echo "*** isis executable not found" ; \
	        echo "" ; \
		exit 1 ; \
	    fi ;            \
	    ISIS_SRCDIR=$(prefix) ; \
	 fi ; \
	export ISIS_SRCDIR ; \
	if test -f "$(HEA)/headas-init.sh" ; then \
	    HEADAS="$(HEA)" ; export HEADAS ; . $$HEADAS/headas-init.sh ; \
	fi ; \
	echo "" ; echo Testing $$TEST_ISIS ; echo "" ;\
	for t in $(TEST_SCRIPTS); \
	do \
	   $$TEST_ISIS -n --batch $${t}.sl ; \
	done ; \
	if test "x$(WITH_HEADAS)" != "x" ; then \
	   $$TEST_ISIS -n --batch xspec_import.sl ; \
	fi ; \
	./here_doc.sh $$TEST_ISIS

memcheck:	$(SHARED_LIBRARIES)
	-@for t in $(TEST_SCRIPTS); \
	do \
	   $(MEMCHECK) --log-file=log.$${t} isis -n --batch $${t}.sl ; \
           grep ERROR log.$${t}; grep 'lost: [^0]' log.$${t} ; \
	done ; \
	if test "x$(WITH_HEADAS)" != "x" ; then \
	   t=xspec_import ; \
	   $(MEMCHECK) --log-file=log.$${t} isis -n --batch $${t}.sl ; \
           grep ERROR log.$${t}; grep 'lost: [^0]' log.$${t} ; \
	fi

write-permission:
	@if ! test -w "." ; then \
	   echo "" ; \
	   echo "***  Cannot run regression tests:  no write permission in test directory" ; \
	   echo "" ; \
	   exit 1; \
	fi

rmf_user.so:
	$(CC_SHARED) -o rmf_user.so $(INCS) rmf_user.c $(LIBS_FOR_MODULES)

example-profile.so:
	$(CC_SHARED) -o example-profile.so $(INCS) example-profile.c

clean:
	$(RM) .##* *.log *.so *.o log.*
	cd uncon ; make clean

distclean:
	$(MAKE) clean
	$(RM) Makefile config.h
	cd uncon ; make distclean
